// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/spidernet-io/egressgateway/pkg/k8s/apis/egressgateway.spidernet.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EgressNodeLister helps list EgressNodes.
// All objects returned here must be treated as read-only.
type EgressNodeLister interface {
	// List lists all EgressNodes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.EgressNode, err error)
	// Get retrieves the EgressNode from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.EgressNode, error)
	EgressNodeListerExpansion
}

// egressNodeLister implements the EgressNodeLister interface.
type egressNodeLister struct {
	indexer cache.Indexer
}

// NewEgressNodeLister returns a new EgressNodeLister.
func NewEgressNodeLister(indexer cache.Indexer) EgressNodeLister {
	return &egressNodeLister{indexer: indexer}
}

// List lists all EgressNodes in the indexer.
func (s *egressNodeLister) List(selector labels.Selector) (ret []*v1.EgressNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EgressNode))
	})
	return ret, err
}

// Get retrieves the EgressNode from the index for a given name.
func (s *egressNodeLister) Get(name string) (*v1.EgressNode, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("egressnode"), name)
	}
	return obj.(*v1.EgressNode), nil
}
