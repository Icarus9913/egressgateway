// Copyright 2022 Authors of spidernet-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	egressgatewayspidernetiov1 "github.com/spidernet-io/egressgateway/pkg/k8s/apis/egressgateway.spidernet.io/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeEgressNodes implements EgressNodeInterface
type FakeEgressNodes struct {
	Fake *FakeEgressgatewayV1
}

var egressnodesResource = schema.GroupVersionResource{Group: "egressgateway.spidernet.io", Version: "v1", Resource: "egressnodes"}

var egressnodesKind = schema.GroupVersionKind{Group: "egressgateway.spidernet.io", Version: "v1", Kind: "EgressNode"}

// Get takes name of the egressNode, and returns the corresponding egressNode object, and an error if there is any.
func (c *FakeEgressNodes) Get(ctx context.Context, name string, options v1.GetOptions) (result *egressgatewayspidernetiov1.EgressNode, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(egressnodesResource, name), &egressgatewayspidernetiov1.EgressNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*egressgatewayspidernetiov1.EgressNode), err
}

// List takes label and field selectors, and returns the list of EgressNodes that match those selectors.
func (c *FakeEgressNodes) List(ctx context.Context, opts v1.ListOptions) (result *egressgatewayspidernetiov1.EgressNodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(egressnodesResource, egressnodesKind, opts), &egressgatewayspidernetiov1.EgressNodeList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &egressgatewayspidernetiov1.EgressNodeList{ListMeta: obj.(*egressgatewayspidernetiov1.EgressNodeList).ListMeta}
	for _, item := range obj.(*egressgatewayspidernetiov1.EgressNodeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested egressNodes.
func (c *FakeEgressNodes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(egressnodesResource, opts))
}

// Create takes the representation of a egressNode and creates it.  Returns the server's representation of the egressNode, and an error, if there is any.
func (c *FakeEgressNodes) Create(ctx context.Context, egressNode *egressgatewayspidernetiov1.EgressNode, opts v1.CreateOptions) (result *egressgatewayspidernetiov1.EgressNode, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(egressnodesResource, egressNode), &egressgatewayspidernetiov1.EgressNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*egressgatewayspidernetiov1.EgressNode), err
}

// Update takes the representation of a egressNode and updates it. Returns the server's representation of the egressNode, and an error, if there is any.
func (c *FakeEgressNodes) Update(ctx context.Context, egressNode *egressgatewayspidernetiov1.EgressNode, opts v1.UpdateOptions) (result *egressgatewayspidernetiov1.EgressNode, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(egressnodesResource, egressNode), &egressgatewayspidernetiov1.EgressNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*egressgatewayspidernetiov1.EgressNode), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeEgressNodes) UpdateStatus(ctx context.Context, egressNode *egressgatewayspidernetiov1.EgressNode, opts v1.UpdateOptions) (*egressgatewayspidernetiov1.EgressNode, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(egressnodesResource, "status", egressNode), &egressgatewayspidernetiov1.EgressNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*egressgatewayspidernetiov1.EgressNode), err
}

// Delete takes name of the egressNode and deletes it. Returns an error if one occurs.
func (c *FakeEgressNodes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(egressnodesResource, name, opts), &egressgatewayspidernetiov1.EgressNode{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeEgressNodes) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(egressnodesResource, listOpts)

	_, err := c.Fake.Invokes(action, &egressgatewayspidernetiov1.EgressNodeList{})
	return err
}

// Patch applies the patch and returns the patched egressNode.
func (c *FakeEgressNodes) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *egressgatewayspidernetiov1.EgressNode, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(egressnodesResource, name, pt, data, subresources...), &egressgatewayspidernetiov1.EgressNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*egressgatewayspidernetiov1.EgressNode), err
}
